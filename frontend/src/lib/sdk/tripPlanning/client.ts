/**
 * trip-planning-service API
 * Version: 1.0.0
 * 
 * Auto-generated TypeScript client
 * Do not edit this file manually
 */

import type { paths } from './types';

export interface ApiClientConfig {
  baseUrl?: string;
  headers?: Record<string, string>;
  timeout?: number;
}

export interface ApiResponse<T> {
  data: T;
  status: number;
  statusText: string;
  headers: Record<string, string>;
}

export interface ApiError {
  message: string;
  status: number;
  statusText: string;
  data?: any;
}

export class TripPlanningServiceClient {
  private baseUrl: string;
  private defaultHeaders: Record<string, string>;
  private timeout: number;

  constructor(config: ApiClientConfig = {}) {
    this.baseUrl = config.baseUrl || 'http://localhost:8089';
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      ...config.headers
    };
    this.timeout = config.timeout || 10000;
  }

  private async request<T>(
    method: string,
    path: string,
    options: {
      params?: Record<string, any>;
      body?: any;
      headers?: Record<string, string>;
    } = {}
  ): Promise<ApiResponse<T>> {
    const url = new URL(path, this.baseUrl);
    
    // Add query parameters
    if (options.params) {
      Object.entries(options.params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }

    const headers = {
      ...this.defaultHeaders,
      ...options.headers
    };

    const requestInit: RequestInit = {
      method,
      headers,
      signal: AbortSignal.timeout(this.timeout)
    };

    if (options.body && method !== 'GET' && method !== 'HEAD') {
      requestInit.body = typeof options.body === 'string' 
        ? options.body 
        : JSON.stringify(options.body);
    }

    try {
      const response = await fetch(url.toString(), requestInit);
      
      let data: T;
      const contentType = response.headers.get('content-type');
      
      if (contentType?.includes('application/json')) {
        data = await response.json();
      } else {
        data = await response.text() as unknown as T;
      }

      if (!response.ok) {
        const error: ApiError = {
          message: response.statusText,
          status: response.status,
          statusText: response.statusText,
          data
        };
        throw error;
      }

      return {
        data,
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      };
    } catch (error) {
      if (error instanceof Error && error.name === 'AbortError') {
        throw new Error('Request timeout');
      }
      throw error;
    }
  }

  // Convenience methods for common HTTP verbs
  async get<T>(path: string, options?: { params?: Record<string, any>; headers?: Record<string, string> }) {
    return this.request<T>('GET', path, options);
  }

  async post<T>(path: string, body?: any, options?: { params?: Record<string, any>; headers?: Record<string, string> }) {
    return this.request<T>('POST', path, { ...options, body });
  }

  async put<T>(path: string, body?: any, options?: { params?: Record<string, any>; headers?: Record<string, string> }) {
    return this.request<T>('PUT', path, { ...options, body });
  }

  async patch<T>(path: string, body?: any, options?: { params?: Record<string, any>; headers?: Record<string, string> }) {
    return this.request<T>('PATCH', path, { ...options, body });
  }

  async delete<T>(path: string, options?: { params?: Record<string, any>; headers?: Record<string, string> }) {
    return this.request<T>('DELETE', path, options);
  }

  // Set authentication token
  setAuthToken(token: string) {
    this.defaultHeaders['Authorization'] = `Bearer ${token}`;
  }

  // Remove authentication token
  clearAuthToken() {
    delete this.defaultHeaders['Authorization'];
  }

  // Update base URL
  setBaseUrl(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  // Update default headers
  setHeaders(headers: Record<string, string>) {
    this.defaultHeaders = { ...this.defaultHeaders, ...headers };
  }
}

// Export type helpers
export type Paths = paths;

// Create default client instance
export const tripPlanningClient = new TripPlanningServiceClient();

export default tripPlanningClient;
