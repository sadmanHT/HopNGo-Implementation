server:
  port: 8080
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
    min-response-size: 1024
  http2:
    enabled: true

spring:
  application:
    name: gateway
  cloud:
    gateway:
      httpclient:
        connect-timeout: 5000
        response-timeout: 30s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      httpserver:
        idle-timeout: 30s
      routes:
        # Auth Service
        - id: auth-service
          uri: http://auth-service:8081
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Social Service
        - id: social-service
          uri: http://social-service:8082
          predicates:
            - Path=/social/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Booking Service
        - id: booking-service
          uri: http://booking-service:8083
          predicates:
            - Path=/bookings/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Market Service
        - id: market-service
          uri: http://market-service:8084
          predicates:
            - Path=/market/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Chat Service
        - id: chat-service
          uri: http://chat-service:8085
          predicates:
            - Path=/chat/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Notification Service
        - id: notification-service
          uri: http://notification-service:8086
          predicates:
            - Path=/notify/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Trip Planning Service
        - id: trip-planning-service
          uri: http://trip-planning-service:8087
          predicates:
            - Path=/trips/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # AI Service
        - id: ai-service
          uri: http://ai-service:8088
          predicates:
            - Path=/api/v1/ai/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
            - name: CircuitBreakerFilter
              args:
                name: ai-service
            - StripPrefix=2
        
        # Search Service
        - id: search-service
          uri: http://search-service:8091
          predicates:
            - Path=/search/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
        
        # Config Service
        - id: config-service
          uri: http://config-service:8092
          predicates:
            - Path=/api/v1/config/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
            - StripPrefix=2
        
        # Admin Service
        - id: admin-service
          uri: http://admin-service:8090
          predicates:
            - Path=/api/v1/admin/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
            - name: RoleAuthorizationFilter
            - StripPrefix=2
        
        # Analytics Service
        - id: analytics-service
          uri: http://analytics-service:8093
          predicates:
            - Path=/api/v1/analytics/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
            - StripPrefix=2
        
        # Emergency Service
        - id: emergency-service
          uri: http://emergency-service:8089
          predicates:
            - Path=/api/v1/emergency/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
            - StripPrefix=2
        
        # Support Service
        - id: support-service
          uri: http://support-service:8093
          predicates:
            - Path=/api/v1/support/**
          filters:
            - name: SecurityHeadersFilter
            - name: JwtAuthenticationFilter
      
      globalcors:
        cors-configurations:
          '[/**]':
            # Restrict to Next.js frontend origins only
            allowedOrigins:
              - "${FRONTEND_URL:http://localhost:3000}"
              - "${FRONTEND_DOMAIN:https://hopngo.com}"
              - "https://www.hopngo.com"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders:
              - "Authorization"
              - "Content-Type"
              - "Accept"
              - "Origin"
              - "X-Requested-With"
              - "Access-Control-Request-Method"
              - "Access-Control-Request-Headers"
              - "X-CSRF-Token"
              - "X-Client-Version"
              - "X-Request-ID"
            exposedHeaders:
              - "X-Total-Count"
              - "X-Page-Count"
              - "Link"
              - "X-RateLimit-Remaining"
              - "X-RateLimit-Reset"
              - "X-Request-ID"
            allowCredentials: true
            maxAge: 3600
            # Additional security for preflight requests
            preflightMaxAge: 1800
      default-filters:
         - name: AcceptLanguageFilter
         - name: ETagFilter
         # Security Headers
         - name: AddResponseHeader
           args:
             name: X-Content-Type-Options
             value: nosniff
         - name: AddResponseHeader
           args:
             name: X-Frame-Options
             value: DENY
         - name: AddResponseHeader
           args:
             name: X-XSS-Protection
             value: "1; mode=block"
         - name: AddResponseHeader
           args:
             name: Referrer-Policy
             value: strict-origin-when-cross-origin
         - name: AddResponseHeader
           args:
             name: Permissions-Policy
             value: "camera=(), microphone=(), geolocation=(self), payment=()"
         - name: AddResponseHeader
           args:
             name: Strict-Transport-Security
             value: "max-age=31536000; includeSubDomains; preload"
         # Content Security Policy
         - name: AddResponseHeader
           args:
             name: Content-Security-Policy
             value: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' ${FRONTEND_URL:http://localhost:3000} ${API_URL:http://localhost:8080} wss: ws:; frame-ancestors 'none'; base-uri 'self'; form-action 'self'"
         # Cache Control
         - name: AddResponseHeader
           args:
             name: Cache-Control
             value: "no-cache, no-store, must-revalidate"
         - name: AddResponseHeader
           args:
             name: Pragma
             value: no-cache
         - name: AddResponseHeader
           args:
             name: Expires
             value: "0"
         # Vary Header
         - name: AddResponseHeader
           args:
             name: Vary
             value: "Accept-Encoding, Authorization, Accept-Language, Origin"

# Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces

# Logging configuration
logging:
  level:
    com.hopngo.gateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Security configuration
security:
  allowed-origins: ${ALLOWED_ORIGINS:http://localhost:3000,https://hopngo.com}
  strict-origin-validation: ${STRICT_ORIGIN_VALIDATION:true}
  enable-request-logging: ${ENABLE_REQUEST_LOGGING:false}
  max-request-size: ${MAX_REQUEST_SIZE:10MB}
  enable-path-traversal-protection: ${ENABLE_PATH_TRAVERSAL_PROTECTION:true}
  enable-request-size-validation: ${ENABLE_REQUEST_SIZE_VALIDATION:true}
  blocked-file-extensions: ${BLOCKED_FILE_EXTENSIONS:.exe,.bat,.cmd,.sh,.ps1,.vbs,.jar,.war,.zip,.rar}

# Rate limiting configuration
rate-limiting:
  enabled: ${RATE_LIMITING_ENABLED:true}
  requests-per-minute: ${RATE_LIMIT_PER_MINUTE:60}
  requests-per-hour: ${RATE_LIMIT_PER_HOUR:1000}
  burst-capacity: ${RATE_LIMIT_BURST:10}
  whitelist-ips: ${RATE_LIMIT_WHITELIST:127.0.0.1,::1}
  
# Redis configuration (for future rate limiting)
spring.data.redis:
  host: localhost
  port: 6379
  timeout: 2000ms
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 0

# Resilience4j Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      ai-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignoreExceptions:
          - java.lang.IllegalArgumentException
      trip-planning-service:
        registerHealthIndicator: true
        slidingWindowSize: 8
        minimumNumberOfCalls: 4
        permittedNumberOfCallsInHalfOpenState: 2
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 3s
        failureRateThreshold: 60
        eventConsumerBufferSize: 10
      booking-service:
        registerHealthIndicator: true
        slidingWindowSize: 8
        minimumNumberOfCalls: 4
        permittedNumberOfCallsInHalfOpenState: 2
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 3s
        failureRateThreshold: 60
        eventConsumerBufferSize: 10
  retry:
    instances:
      ai-service:
        maxAttempts: 3
        waitDuration: 1000ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
      trip-planning-service:
        maxAttempts: 2
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 1.5
      booking-service:
        maxAttempts: 2
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 1.5
  timelimiter:
    instances:
      ai-service:
        timeoutDuration: 10s
        cancelRunningFuture: true
      trip-planning-service:
        timeoutDuration: 8s
        cancelRunningFuture: true
      booking-service:
        timeoutDuration: 8s
        cancelRunningFuture: true