apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-stg-config
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'hopngo-staging'
        environment: 'staging'
    
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
    
    scrape_configs:
    # Prometheus itself
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
    
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    
    # HopNGo applications
    - job_name: 'hopngo-backend'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - hopngo-stg
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: hopngo-backend
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name
    
    - job_name: 'hopngo-frontend'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - hopngo-stg
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: hopngo-frontend
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
    
    # Nginx Ingress Controller
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - ingress-nginx
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: ingress-nginx
      - source_labels: [__meta_kubernetes_pod_container_port_number]
        action: keep
        regex: "10254"
  
  alerts.yml: |
    groups:
    - name: hopngo-staging-alerts
      rules:
      # Application availability
      - alert: HopNGoBackendDown
        expr: up{job="hopngo-backend"} == 0
        for: 1m
        labels:
          severity: critical
          environment: staging
        annotations:
          summary: "HopNGo Backend is down in staging"
          description: "HopNGo Backend has been down for more than 1 minute in staging environment."
      
      - alert: HopNGoFrontendDown
        expr: up{job="hopngo-frontend"} == 0
        for: 1m
        labels:
          severity: critical
          environment: staging
        annotations:
          summary: "HopNGo Frontend is down in staging"
          description: "HopNGo Frontend has been down for more than 1 minute in staging environment."
      
      # High error rate
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High error rate detected in staging"
          description: "Error rate is above 10% for the last 5 minutes in staging."
      
      # High response time
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High response time in staging"
          description: "95th percentile response time is above 1 second for the last 5 minutes."
      
      # Resource usage
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.8
        for: 5m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High memory usage in staging"
          description: "Container memory usage is above 80% for the last 5 minutes."
      
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
          environment: staging
        annotations:
          summary: "High CPU usage in staging"
          description: "Container CPU usage is above 80% for the last 5 minutes."
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-stg
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: server
        environment: staging
    spec:
      serviceAccountName: prometheus-stg
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=7d'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: web
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-stg-config
      - name: prometheus-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
spec:
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  ports:
  - name: web
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-stg
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-stg
  labels:
    environment: staging
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-stg
  labels:
    environment: staging
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-stg
subjects:
- kind: ServiceAccount
  name: prometheus-stg
  namespace: hopngo-stg
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-stg-config
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: config
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    root_url = https://staging-admin.hopngo.com/grafana/
    serve_from_sub_path = true
    
    [security]
    admin_user = admin
    admin_password = staging-admin-password
    
    [users]
    allow_sign_up = false
    
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
  
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-stg
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: server
        environment: staging
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: web
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          subPath: datasources.yaml
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: dashboards.yaml
        - name: grafana-storage
          mountPath: /var/lib/grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "staging-admin-password"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-stg-config
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: server
spec:
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: server
  ports:
  - name: web
    port: 3000
    targetPort: 3000
  type: ClusterIP