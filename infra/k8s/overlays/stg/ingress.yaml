apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hopngo-stg-ingress
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: hopngo
    app.kubernetes.io/component: ingress
    app.kubernetes.io/instance: hopngo-staging
  annotations:
    # Ingress controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL/TLS annotations
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security annotations
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://staging.hopngo.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://staging-api.hopngo.com; frame-ancestors 'self';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Performance annotations
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-brotli: "true"
    nginx.ingress.kubernetes.io/brotli-level: "6"
    nginx.ingress.kubernetes.io/brotli-types: "text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/access-log-path: "/var/log/nginx/staging.hopngo.com.access.log"
spec:
  tls:
  - hosts:
    - staging.hopngo.com
    - staging-api.hopngo.com
    secretName: hopngo-stg-tls
  rules:
  # Frontend application
  - host: staging.hopngo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hopngo-frontend
            port:
              number: 80
  # Backend API
  - host: staging-api.hopngo.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: hopngo-backend
            port:
              number: 8080
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: hopngo-backend
            port:
              number: 8080
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: hopngo-backend
            port:
              number: 9090
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: hopngo-stg-cert
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: hopngo
    app.kubernetes.io/component: certificate
spec:
  secretName: hopngo-stg-tls
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer
  dnsNames:
  - staging.hopngo.com
  - staging-api.hopngo.com
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  subject:
    organizations:
    - HopNGo Staging
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
  - digital signature
  - key encipherment
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hopngo-stg-admin-ingress
  namespace: hopngo-stg
  labels:
    environment: staging
    app.kubernetes.io/name: hopngo
    app.kubernetes.io/component: admin-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Admin interface protection
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: hopngo-stg-admin-auth
    nginx.ingress.kubernetes.io/auth-realm: 'HopNGo Staging Admin'
    
    # IP whitelist for admin access (example IPs)
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Additional security for admin
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "DENY" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - staging-admin.hopngo.com
    secretName: hopngo-stg-admin-tls
  rules:
  - host: staging-admin.hopngo.com
    http:
      paths:
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: hopngo-backend
            port:
              number: 8080
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090