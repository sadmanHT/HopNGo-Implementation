# Argo Rollouts Installation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-rollouts
  namespace: argo-rollouts
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-rollouts
rules:
- apiGroups:
  - argoproj.io
  resources:
  - rollouts
  - rollouts/status
  - rollouts/finalizers
  - experiments
  - experiments/status
  - experiments/finalizers
  - analysisruns
  - analysisruns/status
  - analysisruns/finalizers
  - analysistemplates
  - clusteranalysistemplates
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - create
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - events
  - configmaps
  - secrets
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - create
  - delete
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-rollouts
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-rollouts
subjects:
- kind: ServiceAccount
  name: argo-rollouts
  namespace: argo-rollouts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-rollouts
  namespace: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: argo-rollouts
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-rollouts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-rollouts
    spec:
      serviceAccountName: argo-rollouts
      containers:
      - name: argo-rollouts
        image: quay.io/argoproj/argo-rollouts:v1.6.0
        ports:
        - containerPort: 8090
          name: metrics
        - containerPort: 8080
          name: webhook
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 128Mi
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: v1
kind: Service
metadata:
  name: argo-rollouts-metrics
  namespace: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts-metrics
    app.kubernetes.io/part-of: argo-rollouts
spec:
  ports:
  - name: metrics
    port: 8090
    protocol: TCP
    targetPort: 8090
  selector:
    app.kubernetes.io/name: argo-rollouts