name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      run: |
        # Install OWASP Dependency Check
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.3/dependency-check-8.4.3-release.zip
        unzip dependency-check-8.4.3-release.zip
        
        # Run dependency check on all services
        ./dependency-check/bin/dependency-check.sh \
          --project "HopNGo" \
          --scan "./" \
          --exclude "**/node_modules/**" \
          --exclude "**/target/**" \
          --exclude "**/.git/**" \
          --format ALL \
          --out "./dependency-check-report" \
          --suppression "./security/dependency-check-suppressions.xml" \
          --failOnCVSS 7
          
    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-report
        path: dependency-check-report/
        
    - name: Comment PR with Dependency Check Results
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './dependency-check-report/dependency-check-report.json';
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const vulnerabilities = report.dependencies.filter(dep => dep.vulnerabilities && dep.vulnerabilities.length > 0);
            
            if (vulnerabilities.length > 0) {
              let comment = '## ðŸš¨ Security Vulnerabilities Found\n\n';
              comment += `Found ${vulnerabilities.length} dependencies with vulnerabilities:\n\n`;
              
              vulnerabilities.forEach(dep => {
                comment += `### ${dep.fileName}\n`;
                dep.vulnerabilities.forEach(vuln => {
                  comment += `- **${vuln.name}** (${vuln.severity}): ${vuln.description}\n`;
                });
                comment += '\n';
              });
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [frontend, admin-dashboard]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: npm ci
      
    - name: Run npm audit
      working-directory: ./${{ matrix.service }}
      run: |
        # Generate audit report
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate
        
    - name: Check for high/critical vulnerabilities
      working-directory: ./${{ matrix.service }}
      run: |
        # Fail if high or critical vulnerabilities found
        HIGH_CRITICAL=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
        if [ "$HIGH_CRITICAL" != "0" ]; then
          echo "High or critical vulnerabilities found!"
          npm audit --audit-level=high
          exit 1
        fi
        
    - name: Upload NPM Audit Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: npm-audit-report-${{ matrix.service }}
        path: ${{ matrix.service }}/npm-audit-report.json

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: 
          - auth-service
          - social-service
          - booking-service
          - market-service
          - chat-service
          - notification-service
          - trip-planning-service
          - ai-service
          - search-service
          - config-service
          - admin-service
          - analytics-service
          - emergency-service
          - gateway
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build Docker image
      run: |
        cd ${{ matrix.service }}
        if [ -f "Dockerfile" ]; then
          docker build -t hopngo/${{ matrix.service }}:latest .
        else
          echo "No Dockerfile found for ${{ matrix.service }}, skipping..."
          exit 0
        fi
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'hopngo/${{ matrix.service }}:latest'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './${{ matrix.service }}'
        format: 'sarif'
        output: 'trivy-fs-results-${{ matrix.service }}.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-fs-results-${{ matrix.service }}.sarif'

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        language: [ 'java', 'javascript' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Set up JDK 17 (for Java)
      if: matrix.language == 'java'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build Java projects
      if: matrix.language == 'java'
      run: |
        # Build all Java services
        for service in auth-service social-service booking-service market-service chat-service notification-service trip-planning-service ai-service search-service config-service admin-service analytics-service emergency-service gateway; do
          if [ -d "$service" ] && [ -f "$service/pom.xml" ]; then
            echo "Building $service..."
            cd $service
            mvn clean compile -DskipTests
            cd ..
          fi
        done
        
    - name: Set up Node.js (for JavaScript)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build JavaScript projects
      if: matrix.language == 'javascript'
      run: |
        # Build frontend projects
        for project in frontend admin-dashboard; do
          if [ -d "$project" ] && [ -f "$project/package.json" ]; then
            echo "Building $project..."
            cd $project
            npm ci
            npm run build
            cd ..
          fi
        done
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, npm-audit, trivy-scan, codeql-analysis]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate Security Summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job statuses
        echo "- OWASP Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- NPM Audit: ${{ needs.npm-audit.result }}" >> security-summary.md
        echo "- Trivy Scan: ${{ needs.trivy-scan.result }}" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add timestamp
        echo "Generated on: $(date -u)" >> security-summary.md
        
        # Display summary
        cat security-summary.md
        
    - name: Upload Security Summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-check, npm-audit, trivy-scan, codeql-analysis]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'ðŸš¨ Security vulnerabilities detected in HopNGo! Please check the GitHub Actions results.'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Security Alert: Vulnerabilities detected in HopNGo'
        body: |
          Security vulnerabilities have been detected in the HopNGo application.
          
          Please review the GitHub Actions results and take appropriate action:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Scan Results:
          - OWASP Dependency Check: ${{ needs.dependency-check.result }}
          - NPM Audit: ${{ needs.npm-audit.result }}
          - Trivy Scan: ${{ needs.trivy-scan.result }}
          - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
        to: security-team@hopngo.com
        from: noreply@hopngo.com