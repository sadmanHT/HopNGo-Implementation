server:
  port: 8084

spring:
  application:
    name: market-service
  
  datasource:
    url: jdbc:postgresql://localhost:5432/hopngo_market
    username: hopngo
    password: hopngo_dev_2024!
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  
  redis:
    host: localhost
    port: 6379
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes
  
  cloud:
    stream:
      bindings:
        payment-events-out-0:
          destination: payment.events
          content-type: application/json
        order-events-out-0:
          destination: order.events
          content-type: application/json
        contentFlagged-out-0:
          destination: content.flagged
          content-type: application/json
        contentModeration-out-0:
          destination: content.moderation
          content-type: application/json
      rabbit:
        bindings:
          payment-events-out-0:
            producer:
              routing-key-expression: "'payment.' + payload.eventType.replace('.', '_')"
              exchange-type: topic
          order-events-out-0:
            producer:
              routing-key-expression: "'order.' + payload.eventType.replace('.', '_')"
              exchange-type: topic
          contentFlagged-out-0:
            producer:
              routing-key-expression: "'content.flagged.' + payload.contentType"
              exchange-type: topic
          contentModeration-out-0:
            producer:
              routing-key-expression: "'content.moderation.' + payload.action"
              exchange-type: topic
        binder:
          connection-name-prefix: market-service
  
  rabbitmq:
    host: localhost
    port: 5672
    username: hopngo
    password: hopngo123

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces

logging:
  level:
    com.hopngo.market: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.data.redis: DEBUG

# Payment Provider Configuration
payment:
  default:
    provider: MOCK  # Default provider: MOCK, STRIPE_TEST, BKASH, NAGAD
  
  providers:
    mock:
      enabled: true
      name: "Mock Payment Provider"
      description: "Mock provider for testing and development"
    
    stripe:
      enabled: ${STRIPE_ENABLED:false}
      test-mode: true
      api-key: ${STRIPE_API_KEY:sk_test_your_stripe_secret_key_here}
      publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_your_stripe_publishable_key_here}
      webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_your_webhook_secret_here}
      api-version: "2023-10-16"
      currency: BDT
      name: "Stripe Test Payment Provider"
      description: "Stripe payment provider in test mode"
    
    bkash:
      enabled: ${BKASH_ENABLED:false}
      sandbox-mode: ${BKASH_SANDBOX_MODE:true}
      app-key: ${BKASH_APP_KEY:4f6o0cjiki2rfm34kfdadl1eqq}
      app-secret: ${BKASH_APP_SECRET:2is7hdktrekvrbljjh44ll3d9l1dtjo4pasmjvs5vl5qr3fug4b}
      username: ${BKASH_USERNAME:sandboxTokenizedUser02}
      password: ${BKASH_PASSWORD:sandboxTokenizedUser02@12345}
      base-url: ${BKASH_BASE_URL:https://tokenized.sandbox.bka.sh/v1.2.0-beta}
      webhook-secret: ${BKASH_WEBHOOK_SECRET:bkash_sandbox_webhook_secret_2024}
      currency: BDT
      name: "bKash Payment Provider"
      description: "bKash mobile financial service provider"
    
    nagad:
      enabled: ${NAGAD_ENABLED:false}
      sandbox-mode: ${NAGAD_SANDBOX_MODE:true}
      merchant-id: ${NAGAD_MERCHANT_ID:683002007104225}
      merchant-private-key: |
        ${NAGAD_MERCHANT_PRIVATE_KEY:-----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC6dH149Zb7c
        -----END PRIVATE KEY-----}
      nagad-public-key: |
        ${NAGAD_PUBLIC_KEY:-----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiub
        -----END PUBLIC KEY-----}
      base-url: ${NAGAD_BASE_URL:http://sandbox.mynagad.com:10080/remote-payment-gateway-1.0}
      webhook-secret: ${NAGAD_WEBHOOK_SECRET:nagad_sandbox_webhook_secret_2024}
      currency: BDT
      name: "Nagad Payment Provider"
      description: "Nagad digital financial service provider"
  
  webhook:
    timeout: 30s
    retry:
      max-attempts: 3
      delay: 5s
    signature-verification:
      enabled: true
      algorithms:
        STRIPE_TEST: sha256
        BKASH: sha256
        NAGAD: rsa-sha256
        MOCK: sha256
  
  security:
    allowed-origins:
      - "http://localhost:3000"  # Frontend development
      - "https://hopngo.com"     # Production frontend
    rate-limiting:
      enabled: true
      requests-per-minute: 60

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
  info:
    title: HopNGo Market Service API
    description: API for marketplace functionality including products, orders, and payments
    version: 1.0.0