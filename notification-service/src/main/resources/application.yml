server:
  port: 8086

spring:
  application:
    name: notification-service
  
  datasource:
    url: jdbc:postgresql://localhost:5432/hopngo_notification
    username: hopngo
    password: hopngo_dev_2024!
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  
  # Mail Configuration for Mailhog
  mail:
    host: mailhog
    port: 1025
    username: 
    password: 
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000
    default-encoding: UTF-8
  
  # RabbitMQ Stream Configuration
  cloud:
    stream:
      bindings:
        # Booking Events Consumer
        booking-events-in-0:
          destination: booking.events
          content-type: application/json
          group: notification-service
          consumer:
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-max-interval: 10000
            back-off-multiplier: 2.0
        
        # Payment Events Consumer
        payment-events-in-0:
          destination: payment.events
          content-type: application/json
          group: notification-service
          consumer:
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-max-interval: 10000
            back-off-multiplier: 2.0
        
        # Chat Events Consumer
        chat-events-in-0:
          destination: chat.events
          content-type: application/json
          group: notification-service
          consumer:
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-max-interval: 10000
            back-off-multiplier: 2.0
        
        # Emergency Events Consumer
        emergency-events-in-0:
          destination: emergency.triggered
          content-type: application/json
          group: notification-service
          consumer:
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-max-interval: 10000
            back-off-multiplier: 2.0
      
      rabbit:
        bindings:
          booking-events-in-0:
            consumer:
              binding-routing-key: 'booking.*'
              exchange-type: topic
              auto-bind-dlq: true
              republish-to-dlq: true
          
          payment-events-in-0:
            consumer:
              binding-routing-key: 'payment.*'
              exchange-type: topic
              auto-bind-dlq: true
              republish-to-dlq: true
          
          chat-events-in-0:
            consumer:
              binding-routing-key: 'chat.*'
              exchange-type: topic
              auto-bind-dlq: true
              republish-to-dlq: true
          
          emergency-events-in-0:
            consumer:
              binding-routing-key: 'emergency.*'
              exchange-type: topic
              auto-bind-dlq: true
              republish-to-dlq: true
      
      function:
        definition: bookingEventsConsumer;paymentEventsConsumer;chatEventsConsumer;emergencyEventsConsumer
  
  # RabbitMQ Connection
  rabbitmq:
    host: localhost
    port: 5672
    username: hopngo
    password: rabbit_dev_2024!
    virtual-host: hopngo

# Web Push Configuration
webpush:
  vapid:
    public-key: ${VAPID_PUBLIC_KEY:}
    private-key: ${VAPID_PRIVATE_KEY:}
    subject: ${VAPID_SUBJECT:mailto:admin@hopngo.com}

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
      health:
        show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

# Logging
logging:
  level:
    com.hopngo.notification: INFO
    org.springframework.amqp: INFO
    org.springframework.retry: DEBUG
    com.rabbitmq.client: WARN
    org.springframework.amqp.rabbit.connection: INFO
    org.springframework.amqp.rabbit.listener: INFO
    com.fasterxml.jackson: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] [%X{traceId:-},%X{spanId:-}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] [%X{traceId:-},%X{spanId:-}] - %msg%n"
  file:
    name: logs/notification-service.log
    max-size: 100MB
    max-history: 30
    total-size-cap: 1GB

# Application Configuration
notification:
  email:
    from: noreply@hopngo.com
    from-name: HopNGo Platform
  sms:
    enabled: false # Stub implementation
    provider: stub
  push:
    enabled: false # Stub implementation
    provider: stub
  templates:
    base-path: classpath:templates/
  outbox:
    enabled: true
    retry-attempts: 3
    retry-delay: 5000
  retry:
    max-attempts: 5
    initial-delay: 60000
    max-delay: 3600000
    multiplier: 2.0
    batch-size: 50
  batch:
    size: 100
    timeout: 30000
  emergency:
    enabled: true
    channels: [EMAIL, SMS, PUSH]
    priority: HIGH
  monitoring:
    enabled: true
    failure-rate-threshold: 10.0
    rabbitmq-error-threshold: 100
    serialization-error-threshold: 50
    statistics-interval: 300000
    cleanup-interval: 86400000
  alerting:
    enabled: true
    email-recipients: ["admin@hopngo.com"]
    slack-webhook-url: ""
    high-error-rate-threshold: 5.0
    connection-failure-threshold: 5